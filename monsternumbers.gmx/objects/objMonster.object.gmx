<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMonster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_number = ceil(random(4));
default_hue = 160;
phi = 1.618033988749894848204586834 / 3;
my_pen = -1;

alarm[0]=1;
go_x = x;
go_y = y;

wiggle = 0;
move_speed = 4;

changing_pen = -1;
selected=0;
select_anim = 0;

win_anim = -random(1);

spr_list=ds_list_create();
ds_list_add(spr_list,sprMonster);
if (global.levels_completed&gt;=3){ds_list_add(spr_list,sprMonsterB);}
if (global.levels_completed&gt;=6){ds_list_add(spr_list,sprMonsterC);}
if (global.levels_completed&gt;=9){ds_list_add(spr_list,sprMonsterD);}
sprite_index = ds_list_find_value(spr_list,floor(random(ds_list_size(spr_list))));
ds_list_destroy(spr_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=(room_speed*3) + random(room_speed*5);
go_x = max(64,min(room_width-64,pen_x(my_pen)-(objController.pen_width/2)+random(objController.pen_width)));
go_y = max(64,min(room_height-64,pen_y(my_pen)-(objController.pen_height/2)+random(objController.pen_height)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if mouse_check_button_pressed(mb_left){
    if instance_nearest(mouse_x,mouse_y/*+(112*image_yscale)*/,objMonster)==id and point_distance(mouse_x,mouse_y/*+(112*image_yscale)*/,x,y)&lt;128{
        selected = 1;
        audio_play_sound(choose(monster01,monster02,monster03),true,0);
        if !changing_pen and my_pen!=-1{objController.pen[my_pen]-=my_number;}
        my_pen=-1;
        changing_pen = 0;
    }
}
if !mouse_check_button(mb_left) and selected{ //deselected...
    selected=0;
    var dist=99999;
    for(var i=0;i&lt;objController.play_pens;i+=1){
            if point_distance(go_x,go_y,pen_x(i),pen_y(i))&lt;dist{
                dist = point_distance(x,y,pen_x(i),pen_y(i));
                my_pen = i; //my pen is now the one nearest me
                }
        }
    changing_pen = 1;
    if point_distance(go_x,go_y,pen_x(my_pen),pen_y(my_pen))&gt;objController.pen_width/2{alarm[0]=1;}
    }
if selected{go_x = mouse_x; go_y=mouse_y/*+(112*image_yscale)*/;} //while selected, follow the mouse.

if objController.level_cleared{win_anim+=1/(room_speed/2); go_x=x; go_y=y; selected=0;} // win animation

if point_distance(x,y,go_x,go_y)&gt;(move_speed*(1+selected)){ //walk to wander goal
    x += lengthdir_x((move_speed*(1+selected)),point_direction(x,y,go_x,go_y));
    y += lengthdir_y((move_speed*(1+selected)),point_direction(x,y,go_x,go_y));
}else{
x = go_x;
y= go_y;
if changing_pen{ //if we're arriving at a new pen...
    changing_pen = 0;
    if my_pen!=-1{
    objController.pen[my_pen]+=my_number;
    }
}
}

if x!=xprevious{ //turned left/right
    if x&gt;xprevious{image_xscale = -abs(image_xscale);}
    else{image_xscale = abs(image_xscale);}
}

if x!=xprevious or y!=yprevious{ //wiggle on move
    wiggle += (1/(room_speed/4)); //4 wiggles per second
}
else{ //when not moving, go to normalized wiggle
if abs(round(wiggle)-wiggle)&gt;.01{
    wiggle+=(round(wiggle)-wiggle)*.4;
    }else{
    //wiggle = 0;
    }

}

image_angle = (20*sqr(sin(wiggle*pi))*sign(sin(wiggle*pi))); //wiggle angle
depth = -y; //depth sorting

select_anim+=(selected-select_anim)*.3; //select animation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = ((room_width/objController.play_pens)/256)/2*sign(image_xscale)*(1+(.25*select_anim));
image_yscale = (((room_width/objController.play_pens)/256)/2)*(1+(abs(wiggle-round(wiggle))/3))*(1+(.25*select_anim));

draw_set_blend_mode(bm_subtract);
draw_ellipse_color(x-(112*image_xscale),y-(72*image_yscale),
    x+(112*image_xscale),y+(72*image_yscale),merge_color(c_black,c_yellow,.5),c_black,false);
draw_set_blend_mode(bm_normal);

var skin_color = make_color_hsv((default_hue + (255/phi*(my_number-1) )) mod 255,50,255),
spot_color = make_color_hsv((default_hue + (255/phi*(my_number-1) ) + (-35) ) mod 255,100,180),
num_color = make_color_hsv((default_hue + (255/phi*(my_number-1) ) + (35) ) mod 255,240,70);

if my_number&lt;0{
var s=skin_color;
skin_color = num_color;
num_color = s;
spot_color = make_color_hsv((default_hue + (255/phi*(my_number-1) ) + (70) ) mod 255,200,100);
}

draw_sprite_ext(sprite_index,0,x,y-(64*abs(sin(max(0,win_anim)*pi))),image_xscale,image_yscale,image_angle,skin_color,image_alpha);
draw_sprite_ext(sprite_index,1,x,y-(64*abs(sin(max(0,win_anim)*pi))),image_xscale,image_yscale,image_angle,spot_color,image_alpha);

draw_set_halign(fa_center); draw_set_valign(fa_middle); draw_set_font(ftMain);
draw_set_color(num_color);
draw_text_transformed(
x+lengthdir_x((sprite_height*.4)+(64*abs(sin(max(0,win_anim)*pi))),90+image_angle),
y+lengthdir_y((sprite_height*.4)+(64*abs(sin(max(0,win_anim)*pi))),90+image_angle),
string(my_number),sqrt(image_yscale),sqrt(image_yscale),image_angle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>126,154</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
